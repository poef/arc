{"name":"ARC: Ariadne Components","tagline":"A flexible component library for PHP 5.4+","body":"## ARC: Ariadne Components \r\n\r\nThe Ariadne Component Library is a spinoff from the Ariadne Web \r\nApplication Framework and Content Management System \r\n[ http://www.ariadne-cms.org/ ]\r\n\r\nARC is a set of separate PHP components. Each component is designed to\r\nbe usable as a standalone component except for a very small set of core\r\nabstractions used by multiple components. \r\n\r\n### Examples\r\n\r\nEvent handling, with capture and listen phase, seperate preventDefault \r\nand event cancelling, path aware events and handlers:\r\n\r\n```php5\r\n<?php\r\n    $listener = \\arc\\events::cd('/sub/path/')\r\n    ->listen( 'myEvent', function( $event ) {\r\n         // do something\r\n    } );\r\n```\r\nFiring events:\r\n````php5\r\n<?php\r\n    $result = \\arc\\events::cd('/sub/path/child/')\r\n    ->fire( 'myEvent', [ 'extra' => 'data' ] );\r\n    if ( $result ) {\r\n        // do default action\r\n    }\r\n```\r\nCaching:\r\n````php5\r\n<?php\r\n    $result = \\arc\\cache::cache('cachedName', function() {\r\n        // do something that takes time\r\n        return $value;\r\n    });\r\n```\r\nGeneric caching proxy:\r\n````php5\r\n<?php\r\n    $cachingHttpClient = \\arc\\cache::proxy( \\arc\\http::client(), '1 hour' );\r\n```\r\n\r\n##What makes ARC useful/interesting/unique?\r\n\r\nARC is designed to make full use of all the modern features of PHP that\r\nmake it easy to use and adapt. The code has been written to be read and\r\nadapted. All components use dependency injection and composition instead\r\nof inheritance wherever possible. \r\n\r\nARC does this while still keeping close to the spirit of PHP. This means \r\nthat all components accept basic PHP data types as input wherever possible\r\n- strings and arrays mostly. Where this isn't possible easy conversion \r\nmethods are available to convert simple types to complex and vice-versa.\r\nObjects have __toString() methods if applicable or extend ArrayObject if\r\nthey are array-like.\r\n\r\nThe use of basic types has an advantage that is easily overlooked: strings\r\nand arrays are passed by value to functions, so there is no chance of\r\nyour data being changed inside a function without you knowing it. The\r\nobjects used in ARC - which are always passed by reference in PHP - tend\r\nto be immutable to avoid this same problem. Immutable means that any change\r\nin the state of an object results in a new object instead of a changed \r\nobject.\r\n\r\nThe exceptions are those objects which are meant to be mutable as they are\r\ndatastorage structures, e.g. the tree.\r\n\r\nARC can be divided into a few separate parts which can be used independant\r\nof eachother. The only requirement is the core:\r\n\r\narc\\arc\r\narc\\exceptions\r\narc\\path\r\narc\\tree\r\narc\\lambda\r\narc\\context\r\n\r\nEach ARC component is made up of a base static factory class - e.g.\r\narc\\cache.php - and a subdirectory with non-static classes - arc\\cache\\.\r\n\r\nThe base factory class is intended as a simple static API to use the\r\nclasses in the subdirectories. In cases where a static factory is not\r\noptimal, you can create your own instantation scheme.\r\n\r\nThere is no dependency in the subdirectories on the static classes, it is\r\nstrictly one-way. The events component for example defines an EventTree\r\nclass which requires a node which has the properties in the\r\n\\arc\\tree\\Node.php abstract class. The factory method getEventsTree() in \r\n\\arc\\events.php instantiates a default \\arc\\tree for the EventsTree to use.\r\nThe EventsTree class itself has no knowledge about anything outside its own\r\ncomponent directory.\r\n\r\nIn addition ARC uses ducktyping exclusively. There are sometimes interfaces\r\nand abstract classes defined, but there is never a check on the class of an\r\nobject - other than the generic PHP interfaces - like \\Traversable. Type hints\r\ngive the illusion of safety but they generate runtime errors only and or\r\ntherefor of limited use. By skipping type hints, ARC components can be much\r\nmore flexible and concise. This results in less code which directly means less\r\nbugs.\r\n\r\nARC components are designed to be small. Code size and bugs are directly related,\r\nso by creating smaller components we hope to increase the quality. We also hope\r\nthat succinctness will increase readability and therefor discoverability of bugs.\r\nThe flipside is that the components sometimes may not have a feature you need. The\r\nidea here is to either add it using composition or skip the component and use\r\na more complex one instead.\r\n\r\nThere are a number of well maintained HTTP client libraries for example. ARC adds\r\nits own, but it is a very simple one based on PHP's stream support. This may not\r\nsuffice in some circumstances and you might need Guzzle or Buzz. But the idea is\r\nthat in those cases where you don't need the extra power, you will not need to\r\nadd the extra complexity of those libraries. If later you do need them, it is very\r\nsimple to create a facade using \\arc\\lambda\\Prototype that uses Guzzle or Buzz but\r\nhas the same or similar API as \\arc\\http\\StreamClient.\r\n\r\nThere's a lot more, take a look at the [wiki pages for the full API](https://github.com/Ariadne-CMS/arc/wiki). \r\n\r\nAuke van Slooten\r\nauke@muze.nl\r\n2013\r\n","google":"UA-33591707-1","note":"Don't delete this file! It's used internally to help with page regeneration."}